GIT notes
=========

Installation
------------
Installed in /usr/local/git
$ export PATH=$PATH:/usr/local/git/bin/


Config
------
/etc/gitconfig (every user)
~/.gitconfig   (user-specific)
.git/config    (repo-specific)


Set up identity
---------------
$ git config --global user.name "<name>"
$ git config --global user.email <email>
(--global for ~/.gitconfig, otherwise .git/config)
$ git config --list


Ignore paths and files
----------------------
.gitignore in project root
*.class
bin/
Can add user-specific .gitignore


2FA command-line issue
----------------------
Settings / Developer Settings / Personal access tokens
Generate for scope: repo, workflow
Use token for git remote set-url shown below
Old:
  Enter token for password on first pull
  Saved in credential manager


Set up a repo
-------------
Set up repo on github.com (origin = repo alias); tokens for device vs command line
$ git init
(old?)$ git remote add origin <https|ssh-repolink>
$ git remote add origin https://username@github.com/username/repo.git
$ git remote set-url origin https://<githubtoken>@github.com/<username>/<repositoryname>.git
$ git pull origin master => pull from remote
$ git push origin master => push to remote
$ git fetch origin => pulls data but doesn't merge it
$ git remote show origin => see info about remote
With https link + 2FA, can store access token (without 2FA = plain text pwd):
$ git config credential.helper store

General actions
---------------
$ git status => check status of repo
$ git add <file> => start tracking, and stage a file/dir (sub dirs + files)
$ git rm <file> => stop tracking, may need -f
$ git commit -m "<msg>" => commit staged files
$ git commit -a -m "<msg>" => commit modified tracked files
$ git diff => see what is unstated, --cached for staged
$ git log => check details of commits
$ git commit --amend => amend previous commit
$ git reset HEAD <file> => un-stage file
$ git checkout -- <file> => overwrite working file

Merge
----
$ git mergetool (after pull with conflicts, uses default tool)
$ git reset --merge (for messed-up merge)

Branches
--------
Git stores snapshots not deltas
Commit storage contains commit details, trees, blobs
Branch = pointer to commit
Master = pointer to latest commit
HEAD = current branch pointer
$ git branch <branch-name> => create a branch
$ git checkout <branch-name|master> => repoint HEAD, change working dir contents
$ git tag -a <version> -m <comment> => create tag
$ git push --tags => push tags to github
$ git merge <branch> => merge branch to current branch


