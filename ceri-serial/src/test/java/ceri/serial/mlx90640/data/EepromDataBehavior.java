package ceri.serial.mlx90640.data;

import static ceri.common.test.TestUtil.assertThrown;
import static ceri.serial.mlx90640.Mlx90640.COLUMNS;
import static ceri.serial.mlx90640.Mlx90640.EEPROM_START;
import static ceri.serial.mlx90640.Mlx90640.EEPROM_WORDS;
import static ceri.serial.mlx90640.Mlx90640.ROWS;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import java.util.function.IntFunction;
import org.junit.BeforeClass;
import org.junit.Test;
import ceri.common.collection.ArrayUtil;
import ceri.serial.mlx90640.MlxTestUtil;
import ceri.serial.mlx90640.data.CalibrationData;
import ceri.serial.mlx90640.data.EepromData;

/**
 * Data and results taken from datasheet.
 */
public class EepromDataBehavior {
	private static final int px = MlxTestUtil.px(12, 16);
	private static CalibrationData cal;

	/**
	 * Generates test calibration data.
	 */
	public static CalibrationData calibrationTestData() {
		EepromData eepromData = EepromData.of(MlxTestUtil.bytes(eepromData()));
		CalibrationData.Builder cal = CalibrationData.builder();
		eepromData.restoreCalibrationData(cal);
		return cal.build();
	}

	@BeforeClass
	public static void init() {
		cal = calibrationTestData();
	}

	@Test
	public void shouldRestoreVddSensorParameters() {
		assertThat(cal.kVdd, is(-3168));
		assertThat(cal.vdd25, is(-13056));
	}

	@Test
	public void shouldRestoreTaSensorParameters() {
		assertThat(cal.kvPtat, is(0.00537109375));
		assertThat(cal.ktPtat, is(42.25));
		assertThat(cal.vPtat25, is(12273));
		assertThat(cal.alphaPtat, is(9.0));
	}

	@Test
	public void shouldRestoreOffset() {
		assertCalArray(cal::pixOsRef, pixOsRefExpected());
		assertThat(cal.pixOsRef(px), is(-75));
		assertCalArray(cal::ilChessC, 1.25, 3, 0.125);

	}

	@Test
	public void shouldRestoreSensitivityAlpha() {
		assertCalArray(cal::a, aExpected());
		assertThat(cal.a(px), is(1.2622331269085407E-7));
	}

	@Test
	public void shouldRestoreKvCoefficient() {
		assertOddEven(cal::kv, 0.625, 0.625, 0.5, 0.5);
		assertThat(cal.kv(px), is(0.5));
	}

	@Test
	public void shouldRestoreKtaCoefficient() {
		assertOddEven(cal::kta, 0.00640869140625, 0.00506591796875, 0.0052490234375,
			0.005126953125);
		assertThat(cal.kta(px), is(0.005126953125));
	}

	@Test
	public void shouldRestoreGainCoefficient() {
		assertThat(cal.gain, is(6383));
	}

	@Test
	public void shouldRestoreKsTaCoefficient() {
		assertThat(cal.ksTa, is(-0.001953125));
	}

	@Test
	public void shoudRestoreCornerTemperatures() {
		assertCalArray(cal::ct, -40, 0, 160, 320);
	}

	@Test
	public void shouldRestoreKsToCoefficient() {
		assertCalArray(cal::ksTo, -8.0108642578125E-4, -8.0108642578125E-4, -8.0108642578125E-4,
			-8.0108642578125E-4);
	}

	@Test
	public void shouldRestoreSensitivityCorrectionCoefficients() {
		assertCalArray(cal::alphaCorrRange, 1.0331042310360048, 1.0, 0.871826171875,
			0.760080873966217);
	}

	@Test
	public void shouldRestoreSensitivityAlphaCp() {
		assertCalArray(cal::aCpSubpage, 4.0745362639427185E-9, 3.851710062008351E-9);
	}

	@Test
	public void shouldRestoreCompensationPixelOffset() {
		assertCalArray(cal::offCpSubpage, -75, -77);
	}

	@Test
	public void shouldRestoreKvCpCoefficient() {
		assertThat(cal.kvCp, is(0.5));
	}

	@Test
	public void shouldRestoreKtaCpCoefficient() {
		assertThat(cal.ktaCp, is(0.00457763671875));
	}

	@Test
	public void shouldRestoreTgcCoefficient() {
		assertThat(cal.tgc, is(1.0));
	}

	@Test
	public void shouldRestoreResolutionControlCoefficient() {
		assertThat(cal.resolutionEe, is(2));
	}

	private void assertCalArray(IntFunction<Double> fn, double... values) {
		for (int i = 0; i < values.length; i++)
			assertThat(fn.apply(i), is(values[i]));
		assertThrown(() -> fn.apply(values.length));
	}

	private void assertCalArray(IntFunction<Integer> fn, int... values) {
		for (int i = 0; i < values.length; i++)
			assertThat(fn.apply(i), is(values[i]));
		assertThrown(() -> fn.apply(values.length));
	}

	private void assertOddEven(IntFunction<Double> actual, double roco, double roce, double reco,
		double rece) {
		for (int p = 0, i = 0; i < ROWS; i++) {
			boolean oddRow = i % 2 == 0; // counting 1..24
			for (int j = 0; j < COLUMNS; j++, p++) {
				boolean oddCol = j % 2 == 0; // counting 1..32
				if (oddRow && oddCol) assertThat(actual.apply(p), is(roco));
				if (oddRow && !oddCol) assertThat(actual.apply(p), is(roce));
				if (!oddRow && oddCol) assertThat(actual.apply(p), is(reco));
				if (!oddRow && !oddCol) assertThat(actual.apply(p), is(rece));
			}
		}
	}

	private static int[] eepromData() {
		int[] eepromData = new int[EEPROM_WORDS];
		ArrayUtil.copy(eepromParams(), 0, eepromData, ee(0x2410));
		eepromData[ee(0x2440) + px] = 0x08a0; // 0x25af
		return eepromData;
	}

	private static int[] eepromParams() {
		return new int[] { //
			0x4210, 0xffbb, 0x0202, 0xf202, 0xf2f2, 0xe2e2, 0xd1e1, 0xb1d1, // 0x2410-17
			0xf10f, 0xf00f, 0xe0ef, 0xe0ef, 0xe1e1, 0xf3f2, 0xf404, 0xe504, // 0x2418-1f
			0x79a6, 0x2f44, 0xffdd, 0x2210, 0x3333, 0x2233, 0xef01, 0x9acc, // 0x2420-27
			0xeedc, 0x10ff, 0x2221, 0x3333, 0x2333, 0x0112, 0xeeff, 0xbbdd, // 0x2428-2f
			0x18ef, 0x2ff1, 0x5952, 0x9d68, 0x5454, 0x0994, 0x6956, 0x5354, // 0x2430-37
			0x2363, 0xe446, 0xfbb5, 0x044b, 0xf020, 0x9797, 0x9797, 0x2889, // 0x2438-3f
		};
	}

	private static int[] pixOsRefExpected() {
		return new int[] { -63, -61, -59, -63, -63, -61, -61, -63, -63, -65, -61, -65, -63, -65,
			-61, -65, -59, -65, -59, -65, -57, -63, -55, -63, -53, -61, -53, -63, -53, -61, -51,
			-65, -71, -69, -67, -71, -71, -69, -69, -71, -71, -73, -69, -73, -71, -73, -69, -73,
			-67, -73, -67, -73, -65, -71, -63, -71, -61, -69, -61, -71, -61, -69, -59, -73, -63,
			-61, -59, -63, -63, -61, -61, -63, -63, -65, -61, -65, -63, -65, -61, -65, -59, -65,
			-59, -65, -57, -63, -55, -63, -53, -61, -53, -63, -53, -61, -51, -65, -71, -69, -67,
			-71, -71, -69, -69, -71, -71, -73, -69, -73, -71, -73, -69, -73, -67, -73, -67, -73,
			-65, -71, -63, -71, -61, -69, -61, -71, -61, -69, -59, -73, -63, -61, -59, -63, -63,
			-61, -61, -63, -63, -65, -61, -65, -63, -65, -61, -65, -59, -65, -59, -65, -57, -63,
			-55, -63, -53, -61, -53, -63, -53, -61, -51, -65, -71, -69, -67, -71, -71, -69, -69,
			-71, -71, -73, -69, -73, -71, -73, -69, -73, -67, -73, -67, -73, -65, -71, -63, -71,
			-61, -69, -61, -71, -61, -69, -59, -73, -63, -61, -59, -63, -63, -61, -61, -63, -63,
			-65, -61, -65, -63, -65, -61, -65, -59, -65, -59, -65, -57, -63, -55, -63, -53, -61,
			-53, -63, -53, -61, -51, -65, -75, -73, -71, -75, -75, -73, -73, -75, -75, -77, -73,
			-77, -75, -77, -73, -77, -71, -77, -71, -77, -69, -75, -67, -75, -65, -73, -65, -75,
			-65, -73, -63, -77, -63, -61, -59, -63, -63, -61, -61, -63, -63, -65, -61, -65, -63,
			-65, -61, -65, -59, -65, -59, -65, -57, -63, -55, -63, -53, -61, -53, -63, -53, -61,
			-51, -65, -75, -73, -71, -75, -75, -73, -73, -75, -75, -77, -73, -77, -75, -77, -73,
			-77, -71, -77, -71, -77, -69, -75, -67, -75, -65, -73, -65, -75, -65, -73, -63, -77,
			-63, -61, -59, -63, -63, -61, -61, -63, -63, -65, -61, -65, -63, -65, -61, -65, -59,
			-65, -59, -65, -57, -63, -55, -63, -53, -61, -53, -63, -53, -61, -51, -65, -75, -73,
			-71, -75, -75, -73, -73, -75, -75, -77, -73, -77, -75, -77, -73, -75, -71, -77, -71,
			-77, -69, -75, -67, -75, -65, -73, -65, -75, -65, -73, -63, -77, -63, -61, -59, -63,
			-63, -61, -61, -63, -63, -65, -61, -65, -63, -65, -61, -65, -59, -65, -59, -65, -57,
			-63, -55, -63, -53, -61, -53, -63, -53, -61, -51, -65, -79, -77, -75, -79, -79, -77,
			-77, -79, -79, -81, -77, -81, -79, -81, -77, -81, -75, -81, -75, -81, -73, -79, -71,
			-79, -69, -77, -69, -79, -69, -77, -67, -81, -63, -61, -59, -63, -63, -61, -61, -63,
			-63, -65, -61, -65, -63, -65, -61, -65, -59, -65, -59, -65, -57, -63, -55, -63, -53,
			-61, -53, -63, -53, -61, -51, -65, -79, -77, -75, -79, -79, -77, -77, -79, -79, -81,
			-77, -81, -79, -81, -77, -81, -75, -81, -75, -81, -73, -79, -71, -79, -69, -77, -69,
			-79, -69, -77, -67, -81, -67, -65, -63, -67, -67, -65, -65, -67, -67, -69, -65, -69,
			-67, -69, -65, -69, -63, -69, -63, -69, -61, -67, -59, -67, -57, -65, -57, -67, -57,
			-65, -55, -69, -79, -77, -75, -79, -79, -77, -77, -79, -79, -81, -77, -81, -79, -81,
			-77, -81, -75, -81, -75, -81, -73, -79, -71, -79, -69, -77, -69, -79, -69, -77, -67,
			-81, -67, -65, -63, -67, -67, -65, -65, -67, -67, -69, -65, -69, -67, -69, -65, -69,
			-63, -69, -63, -69, -61, -67, -59, -67, -57, -65, -57, -67, -57, -65, -55, -69, -83,
			-81, -79, -83, -83, -81, -81, -83, -83, -85, -81, -85, -83, -85, -81, -85, -79, -85,
			-79, -85, -77, -83, -75, -83, -73, -81, -73, -83, -73, -81, -71, -85, -67, -65, -63,
			-67, -67, -65, -65, -67, -67, -69, -65, -69, -67, -69, -65, -69, -63, -69, -63, -69,
			-61, -67, -59, -67, -57, -65, -57, -67, -57, -65, -55, -69, -83, -81, -79, -83, -83,
			-81, -81, -83, -83, -85, -81, -85, -83, -85, -81, -85, -79, -85, -79, -85, -77, -83,
			-75, -83, -73, -81, -73, -83, -73, -81, -71, -85, -67, -65, -63, -67, -67, -65, -65,
			-67, -67, -69, -65, -69, -67, -69, -65, -69, -63, -69, -63, -69, -61, -67, -59, -67,
			-57, -65, -57, -67, -57, -65, -55, -69, -91, -89, -87, -91, -91, -89, -89, -91, -91,
			-93, -89, -93, -91, -93, -89, -93, -87, -93, -87, -93, -85, -91, -83, -91, -81, -89,
			-81, -91, -81, -89, -79, -93 };
	}

	private static double[] aExpected() {
		return new double[] { 4.70608938485384E-8, 5.451147444546223E-8, 6.196205504238605E-8,
			6.196205504238605E-8, 6.941263563930988E-8, 6.941263563930988E-8, 7.686321623623371E-8,
			8.431379683315754E-8, 8.431379683315754E-8, 9.176437743008137E-8, 9.176437743008137E-8,
			9.176437743008137E-8, 9.92149580270052E-8, 9.92149580270052E-8, 9.92149580270052E-8,
			9.92149580270052E-8, 9.92149580270052E-8, 9.92149580270052E-8, 9.92149580270052E-8,
			9.176437743008137E-8, 9.176437743008137E-8, 8.431379683315754E-8, 8.431379683315754E-8,
			7.686321623623371E-8, 6.941263563930988E-8, 6.941263563930988E-8, 6.196205504238605E-8,
			6.196205504238605E-8, 5.451147444546223E-8, 5.451147444546223E-8, 3.961031325161457E-8,
			3.961031325161457E-8, 4.70608938485384E-8, 5.451147444546223E-8, 6.196205504238605E-8,
			6.196205504238605E-8, 6.941263563930988E-8, 6.941263563930988E-8, 7.686321623623371E-8,
			8.431379683315754E-8, 8.431379683315754E-8, 9.176437743008137E-8, 9.176437743008137E-8,
			9.176437743008137E-8, 9.92149580270052E-8, 9.92149580270052E-8, 9.92149580270052E-8,
			9.92149580270052E-8, 9.92149580270052E-8, 9.92149580270052E-8, 9.92149580270052E-8,
			9.176437743008137E-8, 9.176437743008137E-8, 8.431379683315754E-8, 8.431379683315754E-8,
			7.686321623623371E-8, 6.941263563930988E-8, 6.941263563930988E-8, 6.196205504238605E-8,
			6.196205504238605E-8, 5.451147444546223E-8, 5.451147444546223E-8, 3.961031325161457E-8,
			3.961031325161457E-8, 5.451147444546223E-8, 6.196205504238605E-8, 6.941263563930988E-8,
			6.941263563930988E-8, 7.686321623623371E-8, 7.686321623623371E-8, 8.431379683315754E-8,
			9.176437743008137E-8, 9.176437743008137E-8, 9.92149580270052E-8, 9.92149580270052E-8,
			9.92149580270052E-8, 1.0666553862392902E-7, 1.0666553862392902E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 1.0666553862392902E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 9.92149580270052E-8, 9.92149580270052E-8,
			9.176437743008137E-8, 9.176437743008137E-8, 8.431379683315754E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 6.941263563930988E-8, 6.941263563930988E-8, 6.196205504238605E-8,
			6.196205504238605E-8, 4.70608938485384E-8, 4.70608938485384E-8, 5.451147444546223E-8,
			6.196205504238605E-8, 6.941263563930988E-8, 6.941263563930988E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 8.431379683315754E-8, 9.176437743008137E-8, 9.176437743008137E-8,
			9.92149580270052E-8, 9.92149580270052E-8, 9.92149580270052E-8, 1.0666553862392902E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 1.0666553862392902E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 1.0666553862392902E-7,
			9.92149580270052E-8, 9.92149580270052E-8, 9.176437743008137E-8, 9.176437743008137E-8,
			8.431379683315754E-8, 7.686321623623371E-8, 7.686321623623371E-8, 6.941263563930988E-8,
			6.941263563930988E-8, 6.196205504238605E-8, 6.196205504238605E-8, 4.70608938485384E-8,
			4.70608938485384E-8, 5.823676474392414E-8, 6.568734534084797E-8, 7.31379259377718E-8,
			7.31379259377718E-8, 8.058850653469563E-8, 8.058850653469563E-8, 8.803908713161945E-8,
			9.548966772854328E-8, 9.548966772854328E-8, 1.0294024832546711E-7,
			1.0294024832546711E-7, 1.0294024832546711E-7, 1.1039082892239094E-7,
			1.1039082892239094E-7, 1.1039082892239094E-7, 1.1039082892239094E-7,
			1.1039082892239094E-7, 1.1039082892239094E-7, 1.1039082892239094E-7,
			1.0294024832546711E-7, 1.0294024832546711E-7, 9.548966772854328E-8,
			9.548966772854328E-8, 8.803908713161945E-8, 8.058850653469563E-8, 8.058850653469563E-8,
			7.31379259377718E-8, 7.31379259377718E-8, 6.568734534084797E-8, 6.568734534084797E-8,
			5.078618414700031E-8, 5.078618414700031E-8, 6.196205504238605E-8, 6.941263563930988E-8,
			7.686321623623371E-8, 7.686321623623371E-8, 8.431379683315754E-8, 8.431379683315754E-8,
			9.176437743008137E-8, 9.92149580270052E-8, 9.92149580270052E-8, 1.0666553862392902E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 1.1411611922085285E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 9.92149580270052E-8, 9.92149580270052E-8,
			9.176437743008137E-8, 8.431379683315754E-8, 8.431379683315754E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 6.941263563930988E-8, 6.941263563930988E-8, 5.451147444546223E-8,
			5.451147444546223E-8, 6.568734534084797E-8, 7.31379259377718E-8, 8.058850653469563E-8,
			8.058850653469563E-8, 8.803908713161945E-8, 8.803908713161945E-8, 9.548966772854328E-8,
			1.0294024832546711E-7, 1.0294024832546711E-7, 1.1039082892239094E-7,
			1.1039082892239094E-7, 1.1039082892239094E-7, 1.1784140951931477E-7,
			1.1784140951931477E-7, 1.1784140951931477E-7, 1.1784140951931477E-7,
			1.1784140951931477E-7, 1.1784140951931477E-7, 1.1784140951931477E-7,
			1.1039082892239094E-7, 1.1039082892239094E-7, 1.0294024832546711E-7,
			1.0294024832546711E-7, 9.548966772854328E-8, 8.803908713161945E-8, 8.803908713161945E-8,
			8.058850653469563E-8, 8.058850653469563E-8, 7.31379259377718E-8, 7.31379259377718E-8,
			5.823676474392414E-8, 5.823676474392414E-8, 6.568734534084797E-8, 7.31379259377718E-8,
			8.058850653469563E-8, 8.058850653469563E-8, 8.803908713161945E-8, 8.803908713161945E-8,
			9.548966772854328E-8, 1.0294024832546711E-7, 1.0294024832546711E-7,
			1.1039082892239094E-7, 1.1039082892239094E-7, 1.1039082892239094E-7,
			1.1784140951931477E-7, 1.1784140951931477E-7, 1.1784140951931477E-7,
			1.1784140951931477E-7, 1.1784140951931477E-7, 1.1784140951931477E-7,
			1.1784140951931477E-7, 1.1039082892239094E-7, 1.1039082892239094E-7,
			1.0294024832546711E-7, 1.0294024832546711E-7, 9.548966772854328E-8,
			8.803908713161945E-8, 8.803908713161945E-8, 8.058850653469563E-8, 8.058850653469563E-8,
			7.31379259377718E-8, 7.31379259377718E-8, 5.823676474392414E-8, 5.823676474392414E-8,
			6.941263563930988E-8, 7.686321623623371E-8, 8.431379683315754E-8, 8.431379683315754E-8,
			9.176437743008137E-8, 9.176437743008137E-8, 9.92149580270052E-8, 1.0666553862392902E-7,
			1.0666553862392902E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.1411611922085285E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.1411611922085285E-7,
			1.1411611922085285E-7, 1.0666553862392902E-7, 1.0666553862392902E-7,
			9.92149580270052E-8, 9.176437743008137E-8, 9.176437743008137E-8, 8.431379683315754E-8,
			8.431379683315754E-8, 7.686321623623371E-8, 7.686321623623371E-8, 6.196205504238605E-8,
			6.196205504238605E-8, 6.941263563930988E-8, 7.686321623623371E-8, 8.431379683315754E-8,
			8.431379683315754E-8, 9.176437743008137E-8, 9.176437743008137E-8, 9.92149580270052E-8,
			1.0666553862392902E-7, 1.0666553862392902E-7, 1.1411611922085285E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.0666553862392902E-7,
			1.0666553862392902E-7, 9.92149580270052E-8, 9.176437743008137E-8, 9.176437743008137E-8,
			8.431379683315754E-8, 8.431379683315754E-8, 7.686321623623371E-8, 7.686321623623371E-8,
			6.196205504238605E-8, 6.196205504238605E-8, 6.941263563930988E-8, 7.686321623623371E-8,
			8.431379683315754E-8, 8.431379683315754E-8, 9.176437743008137E-8, 9.176437743008137E-8,
			9.92149580270052E-8, 1.0666553862392902E-7, 1.0666553862392902E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 9.92149580270052E-8, 9.176437743008137E-8,
			9.176437743008137E-8, 8.431379683315754E-8, 8.431379683315754E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 6.196205504238605E-8, 6.196205504238605E-8, 6.941263563930988E-8,
			7.686321623623371E-8, 8.431379683315754E-8, 8.431379683315754E-8, 9.176437743008137E-8,
			9.176437743008137E-8, 9.92149580270052E-8, 1.0666553862392902E-7, 1.0666553862392902E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2622331269085407E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 9.92149580270052E-8, 9.176437743008137E-8,
			9.176437743008137E-8, 8.431379683315754E-8, 8.431379683315754E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 6.196205504238605E-8, 6.196205504238605E-8, 6.941263563930988E-8,
			7.686321623623371E-8, 8.431379683315754E-8, 8.431379683315754E-8, 9.176437743008137E-8,
			9.176437743008137E-8, 9.92149580270052E-8, 1.0666553862392902E-7, 1.0666553862392902E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 9.92149580270052E-8, 9.176437743008137E-8,
			9.176437743008137E-8, 8.431379683315754E-8, 8.431379683315754E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 6.196205504238605E-8, 6.196205504238605E-8, 6.941263563930988E-8,
			7.686321623623371E-8, 8.431379683315754E-8, 8.431379683315754E-8, 9.176437743008137E-8,
			9.176437743008137E-8, 9.92149580270052E-8, 1.0666553862392902E-7, 1.0666553862392902E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.2156669981777668E-7, 1.2156669981777668E-7,
			1.2156669981777668E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 9.92149580270052E-8, 9.176437743008137E-8,
			9.176437743008137E-8, 8.431379683315754E-8, 8.431379683315754E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 6.196205504238605E-8, 6.196205504238605E-8, 6.568734534084797E-8,
			7.31379259377718E-8, 8.058850653469563E-8, 8.058850653469563E-8, 8.803908713161945E-8,
			8.803908713161945E-8, 9.548966772854328E-8, 1.0294024832546711E-7,
			1.0294024832546711E-7, 1.1039082892239094E-7, 1.1039082892239094E-7,
			1.1039082892239094E-7, 1.1784140951931477E-7, 1.1784140951931477E-7,
			1.1784140951931477E-7, 1.1784140951931477E-7, 1.1784140951931477E-7,
			1.1784140951931477E-7, 1.1784140951931477E-7, 1.1039082892239094E-7,
			1.1039082892239094E-7, 1.0294024832546711E-7, 1.0294024832546711E-7,
			9.548966772854328E-8, 8.803908713161945E-8, 8.803908713161945E-8, 8.058850653469563E-8,
			8.058850653469563E-8, 7.31379259377718E-8, 7.31379259377718E-8, 5.823676474392414E-8,
			5.823676474392414E-8, 6.568734534084797E-8, 7.31379259377718E-8, 8.058850653469563E-8,
			8.058850653469563E-8, 8.803908713161945E-8, 8.803908713161945E-8, 9.548966772854328E-8,
			1.0294024832546711E-7, 1.0294024832546711E-7, 1.1039082892239094E-7,
			1.1039082892239094E-7, 1.1039082892239094E-7, 1.1784140951931477E-7,
			1.1784140951931477E-7, 1.1784140951931477E-7, 1.1784140951931477E-7,
			1.1784140951931477E-7, 1.1784140951931477E-7, 1.1784140951931477E-7,
			1.1039082892239094E-7, 1.1039082892239094E-7, 1.0294024832546711E-7,
			1.0294024832546711E-7, 9.548966772854328E-8, 8.803908713161945E-8, 8.803908713161945E-8,
			8.058850653469563E-8, 8.058850653469563E-8, 7.31379259377718E-8, 7.31379259377718E-8,
			5.823676474392414E-8, 5.823676474392414E-8, 6.196205504238605E-8, 6.941263563930988E-8,
			7.686321623623371E-8, 7.686321623623371E-8, 8.431379683315754E-8, 8.431379683315754E-8,
			9.176437743008137E-8, 9.92149580270052E-8, 9.92149580270052E-8, 1.0666553862392902E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 1.1411611922085285E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.1411611922085285E-7, 1.1411611922085285E-7, 1.1411611922085285E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 9.92149580270052E-8, 9.92149580270052E-8,
			9.176437743008137E-8, 8.431379683315754E-8, 8.431379683315754E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 6.941263563930988E-8, 6.941263563930988E-8, 5.451147444546223E-8,
			5.451147444546223E-8, 5.823676474392414E-8, 6.568734534084797E-8, 7.31379259377718E-8,
			7.31379259377718E-8, 8.058850653469563E-8, 8.058850653469563E-8, 8.803908713161945E-8,
			9.548966772854328E-8, 9.548966772854328E-8, 1.0294024832546711E-7,
			1.0294024832546711E-7, 1.0294024832546711E-7, 1.1039082892239094E-7,
			1.1039082892239094E-7, 1.1039082892239094E-7, 1.1039082892239094E-7,
			1.1039082892239094E-7, 1.1039082892239094E-7, 1.1039082892239094E-7,
			1.0294024832546711E-7, 1.0294024832546711E-7, 9.548966772854328E-8,
			9.548966772854328E-8, 8.803908713161945E-8, 8.058850653469563E-8, 8.058850653469563E-8,
			7.31379259377718E-8, 7.31379259377718E-8, 6.568734534084797E-8, 6.568734534084797E-8,
			5.078618414700031E-8, 5.078618414700031E-8, 5.451147444546223E-8, 6.196205504238605E-8,
			6.941263563930988E-8, 6.941263563930988E-8, 7.686321623623371E-8, 7.686321623623371E-8,
			8.431379683315754E-8, 9.176437743008137E-8, 9.176437743008137E-8, 9.92149580270052E-8,
			9.92149580270052E-8, 9.92149580270052E-8, 1.0666553862392902E-7, 1.0666553862392902E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 1.0666553862392902E-7,
			1.0666553862392902E-7, 1.0666553862392902E-7, 9.92149580270052E-8, 9.92149580270052E-8,
			9.176437743008137E-8, 9.176437743008137E-8, 8.431379683315754E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 6.941263563930988E-8, 6.941263563930988E-8, 6.196205504238605E-8,
			6.196205504238605E-8, 4.70608938485384E-8, 4.70608938485384E-8, 5.078618414700031E-8,
			5.823676474392414E-8, 6.568734534084797E-8, 6.568734534084797E-8, 7.31379259377718E-8,
			7.31379259377718E-8, 8.058850653469563E-8, 8.803908713161945E-8, 8.803908713161945E-8,
			9.548966772854328E-8, 9.548966772854328E-8, 9.548966772854328E-8, 1.0294024832546711E-7,
			1.0294024832546711E-7, 1.0294024832546711E-7, 1.0294024832546711E-7,
			1.0294024832546711E-7, 1.0294024832546711E-7, 1.0294024832546711E-7,
			9.548966772854328E-8, 9.548966772854328E-8, 8.803908713161945E-8, 8.803908713161945E-8,
			8.058850653469563E-8, 7.31379259377718E-8, 7.31379259377718E-8, 6.568734534084797E-8,
			6.568734534084797E-8, 5.823676474392414E-8, 5.823676474392414E-8, 4.3335603550076485E-8,
			4.3335603550076485E-8, 4.3335603550076485E-8, 5.078618414700031E-8,
			5.823676474392414E-8, 5.823676474392414E-8, 6.568734534084797E-8, 6.568734534084797E-8,
			7.31379259377718E-8, 8.058850653469563E-8, 8.058850653469563E-8, 8.803908713161945E-8,
			8.803908713161945E-8, 8.803908713161945E-8, 9.548966772854328E-8, 9.548966772854328E-8,
			9.548966772854328E-8, 9.548966772854328E-8, 9.548966772854328E-8, 9.548966772854328E-8,
			9.548966772854328E-8, 8.803908713161945E-8, 8.803908713161945E-8, 8.058850653469563E-8,
			8.058850653469563E-8, 7.31379259377718E-8, 6.568734534084797E-8, 6.568734534084797E-8,
			5.823676474392414E-8, 5.823676474392414E-8, 5.078618414700031E-8, 5.078618414700031E-8,
			3.5885022953152657E-8, 3.5885022953152657E-8, 4.3335603550076485E-8,
			5.078618414700031E-8, 5.823676474392414E-8, 5.823676474392414E-8, 6.568734534084797E-8,
			6.568734534084797E-8, 7.31379259377718E-8, 8.058850653469563E-8, 8.058850653469563E-8,
			8.803908713161945E-8, 8.803908713161945E-8, 8.803908713161945E-8, 9.548966772854328E-8,
			9.548966772854328E-8, 9.548966772854328E-8, 9.548966772854328E-8, 9.548966772854328E-8,
			9.548966772854328E-8, 9.548966772854328E-8, 8.803908713161945E-8, 8.803908713161945E-8,
			8.058850653469563E-8, 8.058850653469563E-8, 7.31379259377718E-8, 6.568734534084797E-8,
			6.568734534084797E-8, 5.823676474392414E-8, 5.823676474392414E-8, 5.078618414700031E-8,
			5.078618414700031E-8, 3.5885022953152657E-8, 3.5885022953152657E-8,
			3.5885022953152657E-8, 4.3335603550076485E-8, 5.078618414700031E-8,
			5.078618414700031E-8, 5.823676474392414E-8, 5.823676474392414E-8, 6.568734534084797E-8,
			7.31379259377718E-8, 7.31379259377718E-8, 8.058850653469563E-8, 8.058850653469563E-8,
			8.058850653469563E-8, 8.803908713161945E-8, 8.803908713161945E-8, 8.803908713161945E-8,
			8.803908713161945E-8, 8.803908713161945E-8, 8.803908713161945E-8, 8.803908713161945E-8,
			8.058850653469563E-8, 8.058850653469563E-8, 7.31379259377718E-8, 7.31379259377718E-8,
			6.568734534084797E-8, 5.823676474392414E-8, 5.823676474392414E-8, 5.078618414700031E-8,
			5.078618414700031E-8, 4.3335603550076485E-8, 4.3335603550076485E-8,
			2.843444235622883E-8, 2.843444235622883E-8, 3.215973265469074E-8, 3.961031325161457E-8,
			4.70608938485384E-8, 4.70608938485384E-8, 5.451147444546223E-8, 5.451147444546223E-8,
			6.196205504238605E-8, 6.941263563930988E-8, 6.941263563930988E-8, 7.686321623623371E-8,
			7.686321623623371E-8, 7.686321623623371E-8, 8.431379683315754E-8, 8.431379683315754E-8,
			8.431379683315754E-8, 8.431379683315754E-8, 8.431379683315754E-8, 8.431379683315754E-8,
			8.431379683315754E-8, 7.686321623623371E-8, 7.686321623623371E-8, 6.941263563930988E-8,
			6.941263563930988E-8, 6.196205504238605E-8, 5.451147444546223E-8, 5.451147444546223E-8,
			4.70608938485384E-8, 4.70608938485384E-8, 3.961031325161457E-8, 3.961031325161457E-8,
			2.4709152057766914E-8, 2.4709152057766914E-8 };
	}

	/**
	 * Gets the buffer offset from EEPROM address.
	 */
	private static int ee(int address) {
		return address - EEPROM_START;
	}

}
