Purejavacomm
============

Open
----
- open(port, O_RDWR | O_NOCTTY | O_NONBLOCK) why nonblock if clearing next?
- clear nonblock file flag:
  - flags = fcntl(fd, F_GETFL, 0)
  - flags &= ~O_NONBLOCK
  - fcntl(fd, F_SETFL, flags)
- set attributes
  - tcgetattr(fd, termios)
  - cfmakeraw(fd, termios)
    - c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR | IGNCR | ICRNL | IXON)
    - c_oflag &= ~OPOST;
    - c_cflag = (c_cflag & ~(CSIZE | PARENB)) | CS8;
    - c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN)
  - manually set flags
    - c_cflag |= CLOCAL | CREAD
    - c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG) // not required?
    - c_oflag &= ~OPOST // not required?
    - c_cc[VSTART] = (byte) DC1
    - c_cc[VSTOP] = (byte) DC3
    - c_cc[VMIN] = 0;
    - c_cc[VTIME] = 0;
  - tcgstattr(fd, TCSANOW, termios)
- set serial port params (default 9800/8/N/N/1)
  - set speed
    - linux:
      - if standard BNNN
        - clear custom flag
          - ioctl(fd, TIOCGSERIAL, serial)
          - serial.flags &= ~ASYNC_SPD_MASK
          - ioctl(fd, TIOCSSERIAL, serial)
        - cfsetispeed(termios, b)
        - cfsetospeed(termios, b)
        - tcsetattr(fd, TCSANOW, termios)
      - if non-standard
        - set custom alias for B38400
          - ioctl(fd, TIOCGSERIAL, serial)
          - serial.flags = (serial.flags & ~ASYNC_SPD_MASK) | ASYNC_SPD_CUST
          - serial.custom_divisor = round(serial.baud_base / speed)
          - ioctl(fd, TIOCSSERIAL, serial)
        - cfsetispeed(termios, B38400)
        - cfsetospeed(termios, B38400)
        - tcsetattr(fd, TCSANOW, termios)
    - mac:
      - cfsetispeed(termios, speed)
      - cfsetospeed(termios, speed)
      - if tcsetattr(fd, TCSANOW, termios) fails:
        - cfsetispeed(termios, 9600)
        - cfsetospeed(termios, 9600)
        - tcsetattr(fd, TCSANOW, termios)
        - ioctl(fd, IOSSIOSPEED, speed)
  - data bits: db = CS5, CS6, CS7, CS8
  - stop bits: sb = 1, 2, 2 (1, 1.5, 2)
  - fi = c_iflag & ~(INPCK | ISTRIP)
  - parity:
    - fc = c_cflag & ~(PARENB | CMSPAR | PARODD)
    - even: fc |= PARENB
    - odd: fc |= PARENB | PARODD
    - mark: fc |= PARENB | CMSPAR | PARODD
    - space: fc |= PARENB | CMSPAR
  - fc = (fc & ~CSIZE) | db
  - sb == 2 ? fc |= CSTOPB : fc &=~CSTOPB
  - c_cflag = fc, c_iflag = fi
  - tcsetattr(fd, TCSANOW, termios)
  - save settings to member fields
  - reset old termios on exception
- set flow control (none)
  - c_iflag &= ~IXANY
  - rts in/out: c_cflag |= CRTSCTS else c_cflag &= ~CRTSCTS
  - xonoff in: c_iflag |= IXOFF else c_iflag &= ~IXOFF
  - xonoff out: c_iflag |= IXON else c_iflag &= ~IXON
  - tcsetattr(fd, TCSANOW, termios)
- get control line states
  - ioctl(fd, TIOCMGET, ioctl) // int ioctl[0]
- create nudge pipe
  - pipe(new int[2]) // read fd, write fd
  - set O_NONBLOCK on read fd
    - fcntl(fd, F_SETFL, fcntl(fd, F_GETFL, 0) | O_NONBLOCK)
- start daemon thread
  - poll or select fd (IN|OUT) and nudge-read fd (IN)
  - notify read, write, control line change


Nudge Pipe
----------
- created in port constructor
- nonblocking reads
- nudge writes {0} to pipe on:
  - port close, after closing streams
  - when callers register for notifications
    CTS, CD, DSR, RI, data available, output empty
- input stream: poll/select for nudge-read fd
  - read and discard nudge data if available [not for select = bug?]
- daemon thread: poll/select for nudge-read fd
  - read and discard nudge data if available [not for select = bug?]
- closed on port close


Daemon Thread
-------------
- loops until fd closed
- sleep timeout (10ms) unless any of:
  - read notifications enabled, and not notified yet
  - write notifications enabled, and not notified yet
  - nudge enabled, and no line notifications enabled (otherwise poll)
- otherwise
  - poll of fd (IN|OUT) and nudge-read fd (IN) or
  - select of fd (read|write) and nudge-read fd (read)
  - determine if any read or write events occurred
- send read/write/line events


InputStream
-----------
- read logic (from java comm specification):
  - threshold is approximately VMIN
  - timeout is VTIME
  - poll if threshold or time is enabled and 0 (not both?)
  - receive framing not supported
  - input buffer size not supported
  - java comm api:
  ---------------------------------------------------
  |thr |time|behavior (buffer size n)               |
  |----|----|---------------------------------------|   
  | -  | -  | block until any data                  |
  | 0  | 0  | block until any data?                 |
  | 0  | -  | poll until any data                   |
  | -  | 0  | poll until any data                   |
  | m  | -  | block until min(m,n) available        |
  | m  | 0  | poll until min(m,n) available         |
  | -  | x  | block until xms or any data           |
  | 0  | x  | poll until xms or any data            |
  | m  | x  | block until xms or min(m,n) available |
  ---------------------------------------------------
- init:
  - init buffer [2048]
  - init poll array [fd, nudge-read fd]
  - init select fdset
- available
  - ioctl(fd, FIONREAD, &int)
- read: raw read mode (no looping, just use VMIN)
  - only allows threshold <=255
  - check for receive timeout/threshold changes (synchronized)
    - set VTIME, VMIN (default VTIME=0, VMIN=1)
    - update termios tcsetattr
  - read into buffer
  - clear data-available-notified flag (data no longer available)
    - race condition? more data could be available?
- read: polling + blocking mode
  - check for receive timeout/threshold changes (synchronized)
    - copy receive settings to local
    - timeout, threshold, polling mode
  - polling mode: (no looping, just read what is available)
    - threshold or timeout enabled and =0
    - VMIN=0, VTIME=0, 0 bytes required
    - update termios if changed (synchronized)
    - read into buffer
  - blocking mode:
    - threshold and timeout disabled or non-zero
    - loop until break
    - min bytes required =min(threshold|1,bytes-left)
    - VMIN=min(255,bytes-required), VTIME=timeout|0
    - update termios if changed (synchronized)
    - poll or select fd (IN) and nudge-read fd (IN)
      - timeout = VTIME or int max if disabled
    - break if timed-out (select only?)
    - data available: (from fd IN event)
      - read into buffer
      - break if 0 bytes read
    - update bytes-left
    - repeat loop
  - clear data-available-notified flag (data no longer available)
    - race condition? more data could be available?


OutputStream
------------
- output buffer size not supported
- write:
  - offset 0: write from given buffer
  - offset > 0: copy to buffer and write
    - was issue with jna bytebuffer?
- flush: tcdrain


Close
-----
- close streams
- nudge pipe
- set fd to nonblock
- interrupt daemon thread
- close nudge pipe
- wait for daemon thread to stop









