Melexis Driver
--------------
https://github.com/melexis/mlx90640-library

- functions/MLX90640_API.cpp = high-level functionality
  - MLX90640_DumpEE = read all eeprom values: 832 (0x340) values @ 0x2400
  - MLX90640_SynchFrame = write bit4+5 to stat-reg, read stat-reg until bit3 set
  - MLX90640_TriggerMeasurement = read ctrl-reg, set bit15, write back, s/w reset, read+verify bit
  - MLX90640_GetFrameData = read stat-reg until bit3 set, write bit4+5 to stat-reg,
      read 0x400-0x6ff frame data, read 0x700-0x73f aux data, read ctrl-reg, save subpage#,
      validate aux+frame data, return subpage#
  - MLX90640_ExtractParameters = save params vdd, ptat, gain, tgc, res, kstsa, kstso, cp, alpha,
      offset, kta-pix, kv-pix, cilc, dev-pix 
  - MLX90640_GetCur/SetResolution = read/write masked ctrl-reg
  - MLX90640_Get/SetRefreshRate = read/write masked ctrl-reg
  - MLX90640_GetCur/SetInterleaved/SetChessMode = read/write masked ctrl-reg
  - MLX90640_CalculateTo = calc float[] from frame, params, emissivity, tr
  - MLX90640_GetImage = calc float[] from frame, params
  - MLX90640_GetVdd = calc vdd from frame aux and ctrl-reg
  - MLX90640_GetTa = calc ta from vdd and frame aux
  - MLX90640_GetSubPageNumber = get subpage saved with frame
  - MLX90640_BadPixelsCorrection = adjust bad to[] with median from neighbors
  - ExtractXxxParameters = set params from eeprom data
  - ExtractDeviatingPixels = check each px+2rows is 0 or odd (?), mark px#, err if > 4
  - CheckAdjacentPixels = check bad px diff against each other
  - GetMedian = sort bad px and get median
  - IsPixelBad = check px is makred bad/outlier
  - ValidateFrameData = check line first px, err if 0x7fff and line = subpage (interleaved only?)
  - ValidateAuxData = check 0x7fff for [0, 8-18, 20-22, 24-32, 40-50, 52-54, 56-63]

- functions/MLX90640_I2C_Driver.cpp = driver using mbed I2C
  (https://os.mbed.com/docs/mbed-os/v5.15/apis/i2c.html)
  - MLX90640_I2CInit = stop
  - MLX90640_I2CGeneralReset = stop, wait 5us, s/w reset, wait 50us
  - MLX90640_I2CRead = stop, wait 5us, write reg, read nx2 bytes, stop, return short[n]
  - MLX90640_I2CFreqSet = set i2c freq
  - MLX90640_I2CWrite = stop, wait 5us, write reg + value, stop, read reg to verify 
  
- functions/MLX90640_SWI2C_Driver.cpp = software I2C driver
  - MLX90640_I2CInit
  - MLX90640_I2CGeneralReset
  - MLX90640_I2CRead
  - MLX90640_I2CFreqSet
  - MLX90640_I2CWrite
  - I2CSendByte
  - I2CReadBytes
  - Wait
  - I2CStart
  - I2CStop
  - I2CRepeatedStart
  - I2CSendACK
  - I2CSendNack
  - I2CReceiveAck


  
Adafruit Code
-------------
https://github.com/adafruit/Adafruit_Python_PureIO/Adafruit_PureIO/smbus.py

- I2C_M_* flags, I2C_SLAVE... ioctl codes
- i2c_msg, i2c_rdwr_ioctl_data structs
- make_i2c_rdwr_data(msgs):
  - create i2c_rdwr_ioctl_data with i2c_msg[] from (addr, flags, len, buf) message arrays
- SMBus:
  - open /dev/i2c-n r+b (reqd, update, binary)
  - _select_device(addr): ioctl I2C_SLAVE, addr & 0x7f
  - read_bytes(addr, n): read n bytes; for read_byte, n=1
    - _select_device(add)
    - read(fd, n)
  - read_byte_data(addr, cmd): write byte then read byte
    - request = make_i2c_rdwr_data with 2 messages
    - msg1 = addr, 0, 1, &cmd (write 1 byte cmd)
    - msg2 = addr, I2C_M_RD, 1, &result (read 1 byte result)
    - ioctl I2C_RDWR

