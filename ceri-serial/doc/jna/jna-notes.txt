JNA Notes
=========

C code analysis
---------------

Exported functions:
nm -D --defined-only libxxx.so
nm -gU libxxx.dylib

Lib dependencies:
readelf -d libxxx.so | grep NEEDED

Header path:
gcc -v -E -

Search
sudo find <include-path> -type f | grep '\.'h$ | xargs grep xxx
sudo find <include-path> -type f | grep '\.'h$ | xargs grep include | grep xxx/xxx'\.'h

Notes
- #define may have space, such as # define
- To check defined values, compile and run ../../lib/c/symbols.c

Man page numbers:
  1  User Commands
  2  System Calls
  3  C Library Functions
  4  Devices and Special Files
  5  File Formats and Conventions
  6  Games et. al.
  7  Miscellanea
  8  System Administration tools and Daemons


JNA coding
----------
General:
- Don't expect new Memory() to be zeroed
- Dereferencing objects to pointers may cause gc on object (be careful in tests)
- Callbacks should have hard references to prevent gc
- Reference.reachabilityFence(obj) to keep hard ref until called

Arrays:
- PointerUtil.arrayByVal to create contiguous pointer(-type) arrays (void*)
- PointerUtil.arrayByRef to create indirected pointer(-type) arrays (void**)
- JnaUtil.arrayByVal to create contiguous type arrays with given type size (type*)
- JnaUtil.arrayByRef to create indirected type arrays with given type size (type**)
- Struct.arrayByVal to create contiguous struct arrays (struct*)
- Struct.arrayByRef to create indirected struct arrays (struct**)

Structures:
- often better to use pointers to prevent auto read/write
- constructor T(null) is the same as T()
- structs created with null pointer only have placeholder memory
  - struct fields have their own independent placeholder memory 
- struct write() allocates memory
  - struct fields now have correct memory offsets
- for c struct arg (T** ref) use T.ByRef[] ref = { new T.ByRef(null) };   
- creating array from struct calls autoRead() on new array items (not original)


Projects
--------
- (purejavacomm)
- clib
- libusb
- libftdi
- spidev
- i2cdev


